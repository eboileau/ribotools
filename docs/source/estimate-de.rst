How to estimate DE
==================

What is differential expression and how to use the **Ribotools** box
--------------------------------------------------------------------

Differential expression (DE) is a statistical analysis to discover quantitative changes in the expression levels between experimental groups. Genes are typically used as feature, but if Ribo-seq ORFs are available from **Rp-Bp**, DE can be estimated for Ribo-seq ORFs, instead of genes.

**Ribotools** uses Ribo-seq periodic fragment lengths, *i.e.* to determine which features, genes or Ribo-seq ORFs, are differentially regulated, only Ribo-seq reads from periodic fragment lengths are used.


.. note::

    Although DE can be performed on RNA-seq samples only, **Ribotools** comes in handy when dealing with Ribo-seq data. If you want to use **Ribotools** for RNA-seq only, just replace the necessary keys, and use the appropriate options.



How to prepare sample information tables
----------------------------------------

The following keys are required (configuration file):

* ``contrasts`` *(required, input)* A dictionary *key: value*, where *key* is a name for the contrast to be tested, and *value* contains 2 items, the first item is the condition to be tested against the second (reference).

* ``tea_data`` *(required, output)* The base output location for all created files. *Note:* The same key is used for TE.

For example


.. code-block:: yaml

    riboseq_samples:
     ribo-untr-1: /path/to/your/ribotools-example/input/ribo-untr-1.fastq.gz
     ribo-untr-2: /path/to/your/ribotools-example/input/ribo-untr-2.fastq.gz
     ribo-iso-1: /path/to/your/ribotools-example/input/ribo-iso-1.fastq.gz
     ribo-iso-2: /path/to/your/ribotools-example/input/ribo-iso-2.fastq.gz

    riboseq_sample_name_map:
     ribo-untr-1: Ribo-Untr-1
     ribo-untr-2: Ribo-Untr-2
     ribo-iso-1: Ribo-Iso-1
     ribo-iso-2: Ribo-Iso-2

    tea_data: /path/to/your/ribotools-example/dea-results

    contrasts:
     Iso_vs_Untr:
      - Iso
      - Untr


HTSeq workflow
^^^^^^^^^^^^^^

After ``run-htseq-workflow``, count tables are available under *<riboseq_data>/count-tables* (or *<rnaseq_data>/count-tables*, see `User guide <user-guide.html>`_). Then you just need to

.. code-block:: bash

    get-sample-table -config CONFIG -ribo

This will create a file named *sample-table<-project_name>.csv*, where ``project_name`` is the value from that key in the configuration file (or none if this key is not present). Conditions are named according to the ``contrasts`` key, and are assigned to samples based on their names. Each row describes one sample, the first column is the sample name, the second the file path to the count table generated by ``htseq-count``, and remaining columns are metadata, for example


.. code-block:: bash

    sampleName,fileName,assay,condition
    Ribo-Untd-1,/path/to/count-tables/Ribo-Untd-1.de-novo-unique.length-24-26-27-28-29.tsv,ribo,Untd
    Ribo-Untd-2,/path/to/count-tables/Ribo-Untd-2.de-novo-unique.length-25-26-27-28-29.tsv,ribo,Untd
    Ribo-Iso-1,/path/to/count-tables/Ribo-Iso-1.de-novo-unique.length-25-26-27-28-29.tsv,ribo,Iso
    Ribo-Iso-2,/path/to/count-tables/Ribo-Iso-2.de-novo-unique.length-25-26-27-28-29-31.tsv,ribo,Iso


.. important::

    Before proceeding further, always proof-read this file. If you have batches, you should add a columm to this file, and the header must be named *batch*. The assay column can be ignored.


General workflow
^^^^^^^^^^^^^^^^

To estimate DE with data prepared from a different workflow, the sample table must conform to the **Ribotools** specs (that derive from **DESeq2**). In it's current format, it must have, minimally, the following header ``sampleName,condition``, in this same order (see above). The ``condition`` must match the list of ``contrasts`` from the config. The format should be CSV.

The count table must include integer counts for RPFs, and column names (samples) must match ``sampleName`` from the sample table. The first column must be feature ids or symbols. The format should be CSV.

The configuration must include additionally the following keys:

* ``sample_table`` *(optional, input)* The path to a sample table *e.g.* if only running the analysis from existing data.
* ``count_table`` *(optional, input)* The path to a count table *e.g.* if only running the analysis from existing data.


General usage
^^^^^^^^^^^^^

To estimate TE

.. code-block:: bash

    run-dea <-config CONFIG> [-lfcThreshold L2FC] [-alpha ALPHA] [-symbolCol COLUMN] [-orfCol COLUMN_NUMBER] [-delim TAB/CSV] [-batch]

* ``-config CONFIG`` Yaml config file, same as used for ``run-htseq-workflow``, or mock config file with keys as described above,
* ``-lfcThreshold L2FC`` Default: log2(1.2). Used to call *results*.
* ``-alpha ALPHA`` Default: 0.05. Used to call *results*, and as threshold for classifying features.
* ``-symbolCol`` Default: 2. HTSeq (``htseq-count``) output table column with feature symbols or names.
* ``-orfCol`` Default: None. HTSeq (``htseq-count``) output table column with extra ORF type attribute.
* ``-delim`` Default: "". The field separator character for ``read.table`` (TAB for ``"\t"``, and CSV for ``,``).
* ``-batch`` Default: None. Flag to tell the program to use a *batch* column from the sample table (see note above).

In general, ``run-dea -config CONFIG -batch`` is sufficient. If you want to estimate DE for Ribo-seq ORFs features instead of genes, these options ``-symbolCol COLUMN``, ``-orfCol COLUMN_NUMBER``, and  ``-delim TAB/CSV`` might be necessary. See `How to estimate TE using Ribo-seq ORFs <ribo-seq-orfs.html>`_ for details.


.. tip::

    To run the program in the background, and redirect the output to log, simply ``run-dea -config CONFIG [options] > log.out 2>&1 &``


Output files
^^^^^^^^^^^^

Output files are written to *<tea_data>/<contrasts>*, where ``tea_data`` is the path given in the configuration file and ``contrasts`` are the names given to the contrasts in the configuration file.
