How to estimate TE
==================

What is translation efficiency and how to use the **Ribotools** box
-------------------------------------------------------------------

Translation efficiency (TE) is, in simple terms, the ratio of Ribo-seq (ribosome-protected fragments or RPFs) over RNA-seq counts for a given feature. Features with changes in TE between conditions are said to be translationally regulated. Features that undergo differential TE can be classified based on fold changes of Ribo-, RNA-seq and TE (interaction between Ribo- and RNA-seq).

There exists a number of approaches to estimate TE, from a simple ratio calculation, ignoring variance, low expression of RPFs, batch effects, *etc.* to more complex methodologies such as `Ribodiff <https://academic.oup.com/bioinformatics/article/33/1/139/2525694?login=true>`_, `Xtail <https://www.nature.com/articles/ncomms11194>`_, `Riborex <https://academic.oup.com/bioinformatics/article/33/11/1735/2964727?login=true>`_, or `Anota2Seq <https://academic.oup.com/nar/article/47/12/e70/5423604?login=true>`_, to name but a few. Here, we use a simple, but flexible approach that builds on the well-established differential expression software `DEseq2 <https://genomebiology.biomedcentral.com/articles/10.1186/s13059-014-0550-8>`_, allowing us to take into account sample-to-sample variance, and complex experimental design and/or covariates such as batch effect. Importantly, this approach can be run in a few minutes, even for large datasets.

We classify features into 4 broad classes, according to the terminology defined in the `deltaTE protocol <https://currentprotocols.onlinelibrary.wiley.com/doi/full/10.1002/cpmb.108>`_. Translationally *forwarded* features have a significant change in RNA and RPF at the same rate, with no significant change in TE. It is assumed that changes in RNA abundance drive changes in RPFs. *Exclusive* features are differentially translated features that have a significant change in RPF, with no change in RNA, *i.e.* changes in TE are driven changes in RPFs exclusively. These are classified based on significance only, although for the Wald tests, we set a threshold based on log fold change. *Intensified* and *buffered* features take into account the direction of fold change. Translationally *intensified* features have a significant change in TE that acts with the effect of transcription. Translationally *buffered* features have a significant change in TE that counteracts the change in RNA (buffering transcription).


How to prepare sample information tables
----------------------------------------

The following keys are required (configuration file):

* ``contrasts`` *(required, input)* A dictionary *key: value*, where *key* is a name for the contrast to be tested, and *value* contains 2 items, the first item is the condition to be tested against the second (reference).

* ``tea_data`` *(required, output)* The base output location for all created files.

For example


.. code-block:: yaml

    riboseq_samples:
     ribo-untr-1: /path/to/your/ribotools-example/input/ribo-untr-1.fastq.gz
     ribo-untr-2: /path/to/your/ribotools-example/input/ribo-untr-2.fastq.gz
     ribo-iso-1: /path/to/your/ribotools-example/input/ribo-iso-1.fastq.gz
     ribo-iso-2: /path/to/your/ribotools-example/input/ribo-iso-2.fastq.gz

    riboseq_sample_name_map:
     ribo-untr-1: Ribo-Untr-1
     ribo-untr-2: Ribo-Untr-2
     ribo-iso-1: Ribo-Iso-1
     ribo-iso-2: Ribo-Iso-2

    rnaseq_samples:
     rna-untr-1: /path/to/your/ribotools-example/input/rna-untr-1.fastq.gz
     rna-untr-2: /path/to/your/ribotools-example/input/rna-untr-2.fastq.gz
     rna-iso-1: /path/to/your/ribotools-example/input/rna-iso-1.fastq.gz
     rna-iso-2: /path/to/your/ribotools-example/input/rna-iso-2.fastq.gz

    rnaseq_sample_name_map:
     rna-untr-1: RNA-Untr-1
     rna-untr-2: RNA-Untr-2
     rna-iso-1: RNA-Iso-1
     rna-iso-2: RNA-Iso-2

    tea_data: /path/to/your/ribotools-example/tea-results

    contrasts:
     Iso_vs_Untr:
      - Iso
      - Untr


HTSeq workflow
""""""""""""""

After ``run-htseq-workflow``, count tables are available under *<riboseq_data>/count-tables* and *<rnaseq_data>/count-tables* (see `User guide <user-guide.html>`_). Then you just need to

.. code-block:: bash

    get-sample-table -config [CONFIG]

This will create a file named *sample-table<-project_name>.csv*, where ``project_name`` is the value from that key in the configuration file (or none if this key is not present). Conditions are named according to the ``contrasts`` key, and are assigned to samples based on their names. Each row describes one sample, the first column is the sample name, the second the file path to the count table generated by ``htseq-count``, and remaining columns are metadata, for example


.. code-block:: bash

    sampleName,fileName,assay,condition
    Ribo-Untd-1,/path/to/count-tables/Ribo-Untd-1.de-novo-unique.length-24-26-27-28-29.tsv,ribo,Untd
    Ribo-Untd-2,/path/to/count-tables/Ribo-Untd-2.de-novo-unique.length-25-26-27-28-29.tsv,ribo,Untd
    Ribo-Iso-1,/path/to/count-tables/Ribo-Iso-1.de-novo-unique.length-25-26-27-28-29.tsv,ribo,Iso
    Ribo-Iso-2,/path/to/count-tables/Ribo-Iso-2.de-novo-unique.length-25-26-27-28-29-31.tsv,ribo,Iso
    RNA-Untd-1,/path/to/count-tables/RNA-Untd-1.de-novo-unique.length-29.tsv,rna,Untd
    RNA-Untd-2,/path/to/count-tables/RNA-Untd-2.de-novo-unique.length-29.tsv,rna,Untd
    RNA-Iso-2,/path/to/count-tables/RNA-Iso-2.de-novo-unique.length-31.tsv,rna,Iso


.. important::

    Before proceeding further, always proof-read this file, to make sure that the assignment of assay (ribo, rna), and conditions is correct. If you have batches, you should add a columm to this file, and the header must be named *batch*.


General workflow
""""""""""""""""

To estimate TE with data prepared from a different workflow, the sample table must conform to the **Ribotools** specs (that derive from **DESeq2**). In it's current format, it must have, minimally, the following header ``sampleName,assay,condition``, in this same order (see above). The ``assay`` is either *ribo* or *rna*, and the ``condition`` must match the list of ``contrasts`` from the config. The format should be CSV.

The count table must include integer counts for both RNA and RPFs, and column names (samples) must match ``sampleName`` from the sample table. The first column must be feature ids or symbols. The format should be CSV.

The configuration must include additionally the following keys:

* ``sample_table`` *(optional, input)* The path to a sample table *e.g.* if only running TE analysis from existing data.
* ``count_table`` *(optional, input)* The path to a count table *e.g.* if only running TE analysis from existing data.


How to estimate TE
------------------

Two approaches are implemented that provide similar output. The default method is an *LRT* test where a full model ``~assay+condition+assay:condition`` is tested against a reduced model ``~assay+condition``, ignoring the contrasts for the p-value calculation, *i.e* the p-value is for the difference between full and reduced model, and not the fold change. This essentially tests for the interaction term, or the condition effect across assays, *e.g.*

.. math::

   \frac{\left(RPF/RNA\right)_{treatment}}{\left(RPF/RNA\right)_{control}} = \frac{\left(RPF_{treatment}/RPF_{control}\right)}{\left(RNA_{treatment}/RNA_{control}\right)}

Independently of the classification of features into *forwarded*, *exclusive*, *intensified* and *buffered*, you may be interested in features with a significant *padj.dte*. Standard *Wald* tests are used to test for the main effect of condition on RNA and RPF (with log fold change threshold).

We also re-implemented the `deltaTE method <https://currentprotocols.onlinelibrary.wiley.com/doi/full/10.1002/cpmb.108>`_, which only uses *Wald* tests, testing for the interaction term using a full model, and re-fitting the data separately to test for RPF and RNA with a *reduced* model of the form ``~condition``.

In all cases, independent filtering and p-value adjustment is done using *Independent Hypothesis Weighting (IHW)*. Even without IHW, BH is used by default, and rankings are preserved "up to NA" (due to independent filtering *e.g.* adjusted p-values are set to NA for outliers). We replace these with 1. Shrunken log2 fold changes are reported, using *ashr* (adaptive shrinkage estimator) for *LRT*, and *apeglm* (adaptive Student's t prior shrinkage estimator) for *deltaTE*.


.. note::

    Currently testing with covariates only allows to include a *batch* effect, and this is only implemented with the *deltaTE* method.


General usage
^^^^^^^^^^^^^

To estimate TE

.. code-block:: bash

    run-tea -config [CONFIG] <-method LRT/deltaTE> <-lfcThreshold L2FC> <-alpha ALPHA> <-symbolCol COLUMN> <-orfCol COLUMN_NUMBER> <-delim TAB/CSV> <-batch> <-filter>

* ``-config [CONFIG]`` Yaml config file, same as used for ``run-htseq-workflow``, or mock config file with keys as described above,
* ``-method LRT/deltaTE`` Default: LRT.
* ``-lfcThreshold L2FC`` Default: log2(1.2). Used to call *results*.
* ``-alpha ALPHA`` Default: 0.05. Used to call *results*, and as threshold for classifying features.
* ``-symbolCol`` Default: 2. HTSeq (``htseq-count``) output table column with feature symbols or names.
* ``-orfCol`` Default: None. HTSeq (``htseq-count``) output table column with extra ORF type attribute.
* ``-delim`` Default: "". The field separator character for ``read.table`` (TAB for ``"\t"``, and CSV for ``,``).
* ``-batch`` Default: None. Flag to tell the program to use a *batch* column from the sample table (see note above).
* ``-filter`` Default: None. Flag to tell the program to filter features with 0 counts in each assay separately. By default, independent filtering is applied, *i.e.* there is no need to perform additional filtering.

In general, ``run-tea -config [CONFIG] <-method LRT/deltaTE> <-batch>`` is sufficient, if you want to try one or the other method, and/or add batches. If you want to estimate TE for Ribo-seq ORFs features instead of genes, these options ``<-symbolCol COLUMN>``, ``<-orfCol COLUMN_NUMBER>``, and  ``<-delim TAB/CSV>`` might be necessary. See `How to estimate TE using Ribo-seq ORFs <ribo-seq-orfs.html>`_ for details.


.. tip::

    To run the program in the background, and redirect the output to log, simply ``run-tea -config [CONFIG] [options] > log.out 2>&1 &``


Output files
^^^^^^^^^^^^

Output files are written to *<tea_data>/<method>/<contrasts>*, where ``tea_data`` is the path given in the configuration file, ``method`` is either *LRT* or *deltaTE*, and ``contrasts`` are the names given to the contrasts in the configuration file. Files include the full results table in xlxs format, a single PDF output showing the different classes of features that are listed in *forwarded.txt*, *exclusive.txt*, *intensified.txt*, and *buffered.txt*.
